React.js is a clien-side javascript library for SPA (single page applications). Offers rich user interfaces, speed, scalability and flexibility.
React has a component-based architecture(build software based on reusable code)

# COMPONENTS

1. A website is made of independent components. Components are simply functions or chunks of UIs.
2. React.js provides 2 types of components - FUNCTIONAL AND CLASS-BASED 
3. Uses virtual DOM and makes the processing of the web page faster
4. React uses a special syntax known as JSX(JavaScript XML) => syntax extension to JavaScript
5. We return JSX inside the functional components (looks similar to HTML but it essentially is JSX and allows us to write JavaScript code inside it)
6. All component names in React must be capitalized. This is because React treats lowercase elements as HTML elements and so as to distinguish HTML elements from JSX we use capitalized letters.
7. Transpiling is the process of interpreting a programming language and translating it to a specific target language. React uses transpiling to render JSX elements  
8. export statement is used to make modules available to other modules. Think of javascript files as modules
9. Default export is used when function/component name is same as file name and named exports are used when we want the function name to be different from the filename
10. Component is a small piece of functionality while module is a series of components
11. props or properties in React allow us to pass data from one component to another.
12. We can send multiple data types using props. Props allows for flexible dynamic content
13. When two components communicate with each other using props, the element sending the props is the parent and the component receiving the props data is the child
14. It is not possible to send props from child to parent component.
15. Pure functions are functions that always return the same output for the same argument values. A child component receiving props must not modify it, it can only read and display the props
16. JSX allows developers to render HTML inside JavaScript code
17. HTML => JSX => REACT. One of the key features of JSX is to add HTML elements as React elements
18. Embedded Expressions allow JavaScript values to be inserted into HTML of React element.
19. In React, props always flow from parent to child component


# Event Handling

1. Use JavaScript for handling events instead of HTML 
For eg, instead of this <button id="js-btn" onclick="clickHandler()">Click me </button>
use this, a. Plug into HTML element on which to listen for event 
b. Use addEventListener method on the document object

const jsBtn = document.getElementById('js-btn);
jsBtn.addEventListener('click',function(){
  console.log('clicked');
});

2. In React the rule is to avoid manipulating the DOM as much as possible



# STATES

1. The values of all the variables your app is working with at any given point is defined as the state.


# REACT BASICS

React is open-source
1. Styling React apps
2. Event handling
3. Navigation and assests
4. Portfolio project








